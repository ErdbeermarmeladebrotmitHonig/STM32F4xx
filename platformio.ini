# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32F1xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, make the necessary
# changes to the common.build_flags and common.lib_deps below.
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e BTT_SKR_MINI_E3_V20 -e BTT_SKR_MINI_E3_V20_USB
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e bluepill_f103c8_128k -t upload
#    # Clean up build related resources
#    pio run -t clean
#
[platformio]
include_dir = Inc
src_dir = Src

[common]
build_flags =
  -I .
  -I FatFs
  -I FatFs/STM
  -I Drivers/FATFS/App
  -I Drivers/FATFS/Target
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/App
  -I USB_DEVICE/Target
  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  #-D OVERRIDE_MY_MACHINE
  # Uncomment to enable debug builds
  #-D DEBUG
  # Uncomment to enable support for keypad
  #-D KEYPAD_ENABLE=1
  # Uncomment to enable support for odometer
  #-D ODOMETER_ENABLE=1
  # Uncomment to enable support for running G-code from the microSD card
  # You also need to uncomment FatFS and sdcard in lib_deps (see below)
  #-D SDCARD_ENABLE=1
  # Set to 1 or 2 (see Inc/my_machine.h)
  #-D SPINDLE_HUANYANG=1
lib_deps =
  file://boards
  file://bluetooth
  file://grbl
  file://keypad
  file://laser
  file://motors
  file://trinamic
  file://odometer
  file://fans
  file://FatFs
  file://sdcard
  file://spindle
  file://embroidery
  file://Drivers/FATFS/App
  file://Drivers/FATFS/Target
  # USB serial support
  #Middlewares/ST/STM32_USB_Device_Library
  file://Middlewares/ST/STM32_USB_Device_Library/Core
  file://Middlewares/ST/STM32_USB_Device_Library/Class
  USB_DEVICE/App
  USB_DEVICE/Target

[env]
platform = ststm32
platform_packages = framework-stm32cubef4 @ ~1.26.2
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off

[env:btt_skr_pro_1_1]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_BL32K_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BTT_SKR_PRO_1_1=
  # 8MHz crystal
  -D HSE_VALUE=8000000
  -D HAS_BOOTLOADER
  -D USB_SERIAL_CDC=1
lib_deps = ${common.lib_deps}
  file://eeprom
# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:btt_skr_2_tmc2130]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BTT_SKR_20=
  -D HSE_VALUE=8000000
  -D USB_SERIAL_CDC=1
  # Boot loader offset (32K)
  -D VECT_TAB_OFFSET=0x8000
  # TMC2130 stepper drivers
  -D TRINAMIC_ENABLE=2130
lib_deps = ${common.lib_deps}
  file://eeprom
  file://trinamic
# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:btt_skr_2_tmc5160]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BTT_SKR_20=
  -D HSE_VALUE=8000000
  -D USB_SERIAL_CDC=1
  # Boot loader offset (32K)
  -D VECT_TAB_OFFSET=0x8000
  # TMC5160 stepper drivers
  -D TRINAMIC_ENABLE=5160
lib_deps = ${common.lib_deps}
  file://eeprom
  file://trinamic
# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:fysetc_s6]
board = fysetc_s6
board_build.ldscript = STM32F446RETX_NO_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_FYSETC_S6=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
lib_deps = ${common.lib_deps}
  file://eeprom
upload_protocol = dfu 

[env:fysetc_s6_tmc2209]
board = fysetc_s6
board_build.ldscript = STM32F446RETX_NO_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_FYSETC_S6=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
  # TMC2209 stepper drivers
  -D TRINAMIC_ENABLE=2209
lib_deps = ${common.lib_deps}
  file://eeprom
  file://trinamic
upload_protocol = dfu 

[env:nucleo_f411re_morpho_cnc]
board = nucleo_f411re
board_build.ldscript = STM32F411CEUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_MORPHO_CNC=
  -D NUCLEO_F411=
lib_deps = ${common.lib_deps}
  file://eeprom
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f411re_protoneer]
board = nucleo_f411re
board_build.ldscript = STM32F411CEUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_PROTONEER_3XX=
  -D NUCLEO_F411=
  # Uncomment to enable Spindle PWM output on the SpinDir pin
  #-D PROTONEER_SPINDLE_PWM=
lib_deps = ${common.lib_deps}
  file://eeprom
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f446re_morpho_cnc]
board = nucleo_f446re
board_build.ldscript = STM32F446RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_MORPHO_CNC=
  -D NUCLEO_F446=
lib_deps = ${common.lib_deps}
  file://eeprom
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f446re_generic_uno]
board = nucleo_f446re
board_build.ldscript = STM32F446RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_GENERIC_UNO=
  -D NUCLEO_F446=
lib_deps = ${common.lib_deps}
  file://eeprom
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f446re_protoneer]
board = nucleo_f446re
board_build.ldscript = STM32F446RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_PROTONEER_3XX=
  -D NUCLEO_F446=
  # Uncomment to enable Spindle PWM output on the SpinDir pin
  #-D PROTONEER_SPINDLE_PWM=
lib_deps = ${common.lib_deps}
  file://eeprom
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:blackpill_f411ce]
board = blackpill_f411ce
board_build.ldscript = STM32F411CEUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BLACKPILL=
  -D USB_SERIAL_CDC=1 
  # Uncomment to enable Spindle PWM output on the SpinDir pin
  #-D PROTONEER_SPINDLE_PWM=
lib_deps = ${common.lib_deps}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
; change MCU frequency
upload_protocol = dfu 

[env:blackpill_f401cc_uni]
board = blackpill_f401cc
board_build.ldscript = STM32F401CCUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_STM32F401_UNI=
  -D USB_SERIAL_CDC=1
lib_deps = ${common.lib_deps}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
; change MCU frequency
upload_protocol = dfu 

[env:Halcyon_v1]
board                = genericSTM32F401RC
board_build.ldscript = STM32F401RC_FLASH.ld
build_flags          = ${common.build_flags}
  # See Inc/my_machine.h for options
                     -D BOARD_HALCYON_V1=
                     -D HSE_VALUE=8000000
                     -D USB_SERIAL_CDC=1
                     -D SDCARD_ENABLE=1
                     -D _VOLUMES=1
                     -D KEYPAD_ENABLE=1
                     -D EEPROM_IS_FRAM=1
lib_deps             = ${common.lib_deps}
					file://eeprom
					file://trinamic

[env:Halcyon_v1_dfu]
extends              = env:Halcyon_v1
upload_protocol      = dfu

[env:Halcyon_v1_stlink]
extends              = env:Halcyon_v1
upload_protocol      = stlink

[env:f446re_flexi_cnc]
board = genericSTM32F446RE
; change microcontroller
board_build.mcu = stm32f446ret6
board_build.ldscript = STM32F446RETX_BL64K_NONVS_FLASH.ld
build_flags = ${common.build_flags}
  -D STM32F446xx=
  -D HSE_VALUE=25000000
  -D HAS_BOOTLOADER=1
lib_deps = ${common.lib_deps}
  file://eeprom
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

# ATTENTION: Only for BTT Octopus 1.1 with STM32F446 Chip, NOT FOR STM32F429 CHIP!!!
[env:btt_octopus_1_1]
board = nucleo_f446ze
board_build.ldscript = STM32F446ZETX_NONVS_FLASH.ld
# build_type = debug
build_flags = ${common.build_flags}
  -D HAS_BOOTLOADER=1
  #-D DEBUG
  # See Inc/my_machine.h for options
  -D BOARD_BTT_OCTOPUS_1_1=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D SDCARD_ENABLE=1
  -D _VOLUMES=1
lib_deps = ${common.lib_deps}
    file://eeprom
    file://trinamic
upload_protocol = stlink

# ATTENTION: Only for BTT Octopus Pro with STM32F446 Chip, NOT FOR STM32F429 CHIP!!!
# ATTENTION: THIS IS UNTESTED!
[env:btt_octopus_pro]
board = nucleo_f446ze
board_build.ldscript = STM32F446ZETX_NONVS_FLASH.ld
# build_type = debug
build_flags = ${common.build_flags}
  -D HAS_BOOTLOADER=1
  #-D DEBUG
  # See Inc/my_machine.h for options
  -D BOARD_BTT_OCTOPUS_PRO=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D SDCARD_ENABLE=1
  -D _VOLUMES=1
lib_deps = ${common.lib_deps}
    file://eeprom
    file://trinamic
upload_protocol = stlink

# ATTENTION: THIS IS UNTESTED!
[env:btt_octopus_1_1_f429]
board = nucleo_f446ze
board_build.ldscript = STM32F429VGTX_FLASH.ld
# build_type = debug
build_flags = ${common.build_flags}
  -D HAS_BOOTLOADER=1
  #-D DEBUG
  # See Inc/my_machine.h for options
  -D BOARD_BTT_OCTOPUS_1_1=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D SDCARD_ENABLE=1
  -D _VOLUMES=1
lib_deps = ${common.lib_deps}
    file://eeprom
    file://trinamic
upload_protocol = stlink

# ATTENTION: THIS IS UNTESTED!
[env:btt_octopus_pro_f429]
board = nucleo_f446ze
board_build.ldscript = STM32F429VGTX_FLASH.ld
# build_type = debug
build_flags = ${common.build_flags}
  -D HAS_BOOTLOADER=1
  #-D DEBUG
  # See Inc/my_machine.h for options
  -D BOARD_BTT_OCTOPUS_PRO=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D SDCARD_ENABLE=1
  -D _VOLUMES=1
lib_deps = ${common.lib_deps}
    file://eeprom
    file://trinamic
upload_protocol = stlink
